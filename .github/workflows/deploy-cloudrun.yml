name: Deploy to Cloud Run (api-server)

on:
  push:
    branches: [ "api-server" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

      - name: Configure gcloud
        run: |
          gcloud config set project "${{ vars.GCP_PROJECT_ID }}"
          gcloud config set run/region "${{ vars.GCP_REGION }}"

      - name: Enable APIs (idempotent)
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com cloudbuild.googleapis.com

      - name: Build and push image with Cloud Build
        run: |
          IMAGE_REF="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/containers/mymovies-api:latest"
          echo "Building ${IMAGE_REF}"
          gcloud builds submit --region "${{ vars.GCP_REGION }}" --tag "${IMAGE_REF}" .

      - name: Deploy to Cloud Run
        run: |
          IMAGE_REF="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/containers/mymovies-api:latest"
          gcloud run deploy mymovies-api \
            --image "${IMAGE_REF}" \
            --platform managed \
            --region "${{ vars.GCP_REGION }}" \
            --allow-unauthenticated \
            --timeout=300 --concurrency=1 --cpu=1 --memory=1Gi

      - name: Print service URL
        run: |
          gcloud run services describe mymovies-api --region "${{ vars.GCP_REGION }}" --format='value(status.url)'

    env:
      # Opzionale: le env applicative possono essere aggiornate via gcloud run services update o via console
      PUPPETEER_SKIP_DOWNLOAD: "true"
